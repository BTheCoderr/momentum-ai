// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Subscription info
  subscriptionTier String @default("free") // free, pro, elite
  subscriptionId   String?
  customerId       String?
  
  accounts Account[]
  sessions Session[]
  goals    Goal[]
  messages Message[]
  checkIns DailyCheckIn[]
  insights AIInsight[]
}

model Goal {
  id               String   @id @default(cuid())
  title            String
  description      String
  emotionalContext String?
  deadline         DateTime?
  progress         Int      @default(0)
  status           String   @default("active") // active, completed, paused, at-risk
  currentStreak    Int      @default(0)
  bestStreak       Int      @default(0)
  completionRate   Int      @default(0)
  lastCheckIn      DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  habits   Habit[]
  checkIns DailyCheckIn[]
  insights AIInsight[]
}

model Habit {
  id          String   @id @default(cuid())
  text        String
  completed   Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model DailyCheckIn {
  id               String   @id @default(cuid())
  date             DateTime @default(now())
  completedHabits  String[] // Array of habit IDs
  mood             Int?     // 1-10 scale
  notes            String?
  motivationLevel  Int?     // 1-10 scale
  createdAt        DateTime @default(now())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("question") // question, insight, suggestion, encouragement
  sender    String   // user, ai
  timestamp DateTime @default(now())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIInsight {
  id          String   @id @default(cuid())
  type        String   // motivation-dip, strong-momentum, pattern-recognition
  title       String
  description String
  actionable  Boolean  @default(true)
  priority    String   @default("medium") // low, medium, high
  status      String   @default("active") // active, dismissed, acted-upon
  createdAt   DateTime @default(now())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId String?
  goal   Goal?  @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 